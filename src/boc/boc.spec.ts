import { BitString, Cell } from "..";
import { deserializeBoc, serializeToBoc } from "./boc";
const NativeCell = require('tonweb/src/boc/Cell').Cell;

const cases: string[] = [
    // Wallets
    'B5EE9C72410101010044000084FF0020DDA4F260810200D71820D70B1FED44D0D31FD3FFD15112BAF2A122F901541044F910F2A2F80001D31F3120D74A96D307D402FB00DED1A4C8CB1FCBFFC9ED5441FDF089',
    'B5EE9C724101010100530000A2FF0020DD2082014C97BA9730ED44D0D70B1FE0A4F260810200D71820D70B1FED44D0D31FD3FFD15112BAF2A122F901541044F910F2A2F80001D31F3120D74A96D307D402FB00DED1A4C8CB1FCBFFC9ED54D0E2786F',
    'B5EE9C7241010101005F0000BAFF0020DD2082014C97BA218201339CBAB19C71B0ED44D0D31FD70BFFE304E0A4F260810200D71820D70B1FED44D0D31FD3FFD15112BAF2A122F901541044F910F2A2F80001D31F3120D74A96D307D402FB00DED1A4C8CB1FCBFFC9ED54B5B86E42',
    'B5EE9C724101010100570000AAFF0020DD2082014C97BA9730ED44D0D70B1FE0A4F2608308D71820D31FD31F01F823BBF263ED44D0D31FD3FFD15131BAF2A103F901541042F910F2A2F800029320D74A96D307D402FB00E8D1A4C8CB1FCBFFC9ED54A1370BB6',
    'B5EE9C724101010100630000C2FF0020DD2082014C97BA218201339CBAB19C71B0ED44D0D31FD70BFFE304E0A4F2608308D71820D31FD31F01F823BBF263ED44D0D31FD3FFD15131BAF2A103F901541042F910F2A2F800029320D74A96D307D402FB00E8D1A4C8CB1FCBFFC9ED54044CD7A1',
    'B5EE9C724101010100620000C0FF0020DD2082014C97BA9730ED44D0D70B1FE0A4F2608308D71820D31FD31FD31FF82313BBF263ED44D0D31FD31FD3FFD15132BAF2A15144BAF2A204F901541055F910F2A3F8009320D74A96D307D402FB00E8D101A4C8CB1FCB1FCBFFC9ED543FBE6EE0',
    'B5EE9C724101010100710000DEFF0020DD2082014C97BA218201339CBAB19F71B0ED44D0D31FD31F31D70BFFE304E0A4F2608308D71820D31FD31FD31FF82313BBF263ED44D0D31FD31FD3FFD15132BAF2A15144BAF2A204F901541055F910F2A3F8009320D74A96D307D402FB00E8D101A4C8CB1FCB1FCBFFC9ED5410BD6DAD'
];

function expectBitStringEqual(src: BitString, src2: any) {
    expect(src.length).toBe(src2.length);
    expect(src.cursor).toBe(src2.cursor);
    for (let i = 0; i < src.length; i++) {
        expect(src.get(i)).toBe(src2.get(i));
    }
}

async function expectCellEqual(src: Cell, src2: any) {
    expect(src.isExotic).toBe(!!src2.isExotic);
    expectBitStringEqual(src.bits, src2.bits);
    expect(src.refs.length).toBe(src2.refs.length);
    for (let i = 0; i < src.refs.length; i++) {
        expectCellEqual(src.refs[i], src2.refs[i]);
    }
    expect(src.hash()).toEqual(Buffer.from(await src2.hash()));
}

describe('boc', () => {
    for (let caseIndx = 0; caseIndx < cases.length; caseIndx++) {
        it('should deserialize boc #' + caseIndx, async () => {
            const testCase = cases[caseIndx];
            let cells = deserializeBoc(Buffer.from(testCase, 'hex'));
            let nativeCells = NativeCell.fromBoc(testCase);
            expect(cells.length).toBe(nativeCells.length);
            for (let i = 0; i < cells.length; i++) {
                await expectCellEqual(cells[i], nativeCells[i]);
            }

            // Serialize
            let serialized = serializeToBoc(cells[0], false);
            expect(serialized.toString('hex')).toBe(testCase.toLowerCase());
        });
    }

    it('should deserialize boc twice from the same buffer', () => {
        const SOURCE = Buffer.from(
            'te6ccgECDAEAARMAART/APSkE/S88sgLAQIBIAIDAgFIBAUC+PLtRNDTH9P/0//6QCH6RALTH/gjAdEIgwjXGCDTH1EauvKhAfkBVHAo+RBROPkQUSKx8qIBs46rUoKhgQcIufJmUwDXSvKlkyDXSo6R0wcBgQD8sPJk1FQxNNs88qPobCLRBZM4bCHi+AAEpMjLHxPL/8v/Ac8Wyx/J7VQKCwAE0DACASAGBwIBIAgJAE2+WX9qJoaY+Y6f+Y6f+Y/SAY6Y/o/BGA0JBAg4RcysCDhADQ8Bg4QAF7s5ztRNDTHzHXC/+AARuMl+1E0NcLH4ADIC0NMDAXiwk18DcOD6QDH6QDD6RAK6ArqwAB74D5Mg10qW0wfUAvsA6NE=',
            'base64'
        );
        Cell.fromBoc(SOURCE);
        Cell.fromBoc(SOURCE);
        Cell.fromBoc(SOURCE);
        Cell.fromBoc(SOURCE);
    });

    it('should correctly deserialize', async () => {
        const data = 'te6ccgECMgEABJgAART/APSkE/S88sgLAQIBIAIDAgFIBAUADPIwgEjy8AICywYHAgEgKCkCASAICQIBziYnAgEgCgsCASAXGAIBIAwNAgEgERICASAODwAhX6QAH6RoBGAsAAEvL00/8wgB7SASCHHAPLyAdDTAwFxsJJfA+DwAzEB0x9wggGGoCPAAI4WMwHTH4BIAoIQbWludLoS8vSCCxjzYZdb0z/6AFAD4gP4ASIQNEAFbwT4YYIQQDSjwFIQupMw8AzgghCKWy7nUhC6kzDwDeCCCxjzYVIQupMw8A/ggEAARNMHAaoC1xgBgAFiCEJglNXhSELqTMPAO4IIQt2Z0GlIQupMw8BHgghAl1T39upLwEOAwgEjy8AIBIBMUAgEgFRYAHRwIHLIywHLAMsHy//J0IAAjEEz9A5voSCVAtcBMAHgMXAygAD0cIAQyMsFBfAEFc8WJPoCFMtqEssfyz/PE8mAQPsAgAD0cIAQyMsFBvAEFs8WUAT6AhTLassfEss/zxPJcfsAgAgEgGRoCASAfIAIBIBscAgEgHR4AHQBgwf0Dm+hk/oAMOAwcIAA7IBKIcEA8vIgwgCZyAH6AgKDB/RDlzABgwf0WzDigABk7UTQ+gD0BPQE1NQwgAB8yFAF+gIT9AD0AMzMye1UgAgEgISICASAjJADtPhBbyQwMQLT/9Mf+gD0BNHwCiOAICmDB/AFgEcB8vSAR1MbuvL0UzDwCFNK8AgryMv/VCC4gCD0QwGlRVDwCQSkVCSQ8AlAE/ALghCYKv//JcjL/1JAyx9SIPQAJURDUoXwB4IQMGbRDwPIy/8Syx/0AEEw8AaAA4z4QW8kMDEC0//TH/oA9ATR8Aoh0NP/MIBJURu68vQjgCApgwfwBTGARwHy8lMo8AgpyMv/VCCWgCD0QwSkVCOQ8AkC8AuCEDSISpElyMv/UkDLH1Ig9AAlRENShfAHghBwE3yHA8jL/xLLH/QAQTDwBoAB5PhBbyQwMQLU9ATR7UTQ1DDQ0/8wgElTFLry9CLQ0/8wgEgCuvL08AoxUlDwC4IQyGK6vQLIzPQAQTDwBoAH3PhBbyQyA/QE0fAK0NMA+gDTH9Mf9AQwgEsl8vSAS1OSufL0gEtTk7ny9IBNJIIQO5rKAKBQDLsb8vT4JfgVUwehIPgRUwuAIPQOb6GT0x8wkjAg4gKlLIAg9A5voZZAHIAg9BadMCDIyx/J0EAcgCD0FuIKpATIywBQA4CUAOPoCyx/LHxf0AMnwC4IQGmk4fgLIyx/0AEEw8AYAUT4QW8kMDEC9ATR7UTQ1DDQ0/8wgElRE7ry9IIQHZOq2AHI9ABBMPAGgAFs+EFvJDAxAtT0BNHtRNDUMNDT/zCASVEUuvL0IfsEghByjaOhAsjM9ABBMPAGgAgEgKisCASAwMQAXu5pe1E0NQw0NP/MIAgEgLC0CASAuLwA7tuU9qJofQBqAOhp//gAgPgAgOoYaHgAmIJqGCKgQABGzI7wChA0XwSAAK7L+fAKECRfBIMH9A5voZP6ADDgMHCAAEbu9GCEIMl5MOAAducNPAKXwOAIDICgwfwBY';
        const dataBuffer = Buffer.from(data, 'base64');
        deserializeBoc(dataBuffer);
    });
});